{"version":3,"sources":["api/requests.ts","pages/Homepage.tsx","store/counterSlice.ts","store/selectors.ts","pages/PostCreator.tsx","components/Post/Post.tsx","components/Comments/Comments.tsx","pages/Posts.tsx","App.tsx","store/store.ts","index.tsx"],"names":["BASE_URL","GetFromServer","specify","a","fetch","result","json","PutOnServer","specifyType","specifyData","method","headers","body","JSON","stringify","DeleteFromServer","id","UpdateOnServer","obj","title","HomePage","counterSlice","createSlice","name","initialState","posts","selectedPostId","reducers","showPosts","state","action","payload","selectPost","actions","postSelector","counter","loadPosts","createSelector","loadSinglePost","find","el","PostCreator","useState","setTitle","setBody","dispatch","useDispatch","useSelector","className","onSubmit","event","preventDefault","newPost","length","type","placeholder","value","onChange","target","Post","redactingPost","setRedactingPost","redactedTitle","setRedactedTitle","redactedBody","setRedactedBody","selectedPost","onClick","rows","postToUpdate","Comments","commentsArray","setCommentArray","commentBody","setCommentBody","useEffect","comments","fetcher","map","singleComment","newComment","postId","Posts","isPostsShown","setPostsShown","classNames","empty","posts__container","App","to","path","element","configureStore","reducer","counterReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.a7f9b149.chunk.js","sourcesContent":["import { PostDataType, Comment } from '../react-app-env';\n\nconst BASE_URL = 'https://bloggy-api.herokuapp.com/';\n\nexport const GetFromServer = async (specify:string) => {\n  const result = await fetch(`${BASE_URL}${specify}`);\n\n  return result.json();\n};\n\nexport const PutOnServer = async (specifyType: string, specifyData: PostDataType | Comment) => {\n  const result = await fetch(`${BASE_URL}${specifyType}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(specifyData),\n  });\n\n  return result.json();\n};\n\nexport const DeleteFromServer = async (id:number) => {\n  const result = await fetch(`${BASE_URL}posts/${id}`, {\n    method: 'DELETE',\n  });\n\n  return result.json();\n};\n\nexport const UpdateOnServer = async (specifyData: PostDataType) => {\n  const obj = { title: specifyData.title, body: specifyData.body };\n\n  const result = fetch(`${BASE_URL}posts/${specifyData.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(obj),\n  });\n\n  return result;\n};\n","import React from 'react';\n\nexport const HomePage : React.FC = () => {\n  return (\n    <h1>Welcome</h1>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { PostDataType } from '../react-app-env';\n\nexport interface InitialState {\n  posts: PostDataType[],\n  selectedPostId: null | number,\n}\n\nconst initialState : InitialState = {\n  posts: [],\n  selectedPostId: null,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    showPosts: (state, action: PayloadAction<PostDataType[]>) => {\n      state.posts = action.payload;\n    },\n    selectPost: (state, action: PayloadAction<number | null>) => {\n      state.selectedPostId = action.payload;\n    },\n  },\n});\n\nexport const { showPosts } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { PostDataType } from '../react-app-env';\n\nexport const postSelector = (state : any) => state.counter.posts;\nexport const postIdSelector = (state : any) => state.counter.selectedPostId;\n\nexport const loadPosts = createSelector(([postSelector]), (posts) => {\n  return posts;\n});\n\nexport const loadSinglePost = createSelector(([postIdSelector, postSelector]), (id, posts) => {\n  if (id === null) {\n    return null;\n  }\n\n  return (posts.find((el : PostDataType) => el.id === id));\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PutOnServer } from '../api/requests';\nimport { counterSlice } from '../store/counterSlice';\nimport { loadPosts } from '../store/selectors';\n\nexport const PostCreator : React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n\n  const dispatch = useDispatch();\n  const posts = useSelector(loadPosts);\n\n  return (\n    <div className=\"postCreator\">\n      <form\n        className=\"postCreator__form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          const newPost = {\n            id: posts[posts.length - 1].id + 1,\n            title,\n            body,\n          };\n\n          dispatch(counterSlice.actions.showPosts([...posts, newPost]));\n          PutOnServer('posts', newPost);\n\n          setTitle('');\n          setBody('');\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"post title\"\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"post body\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n        />\n        <button\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DeleteFromServer, GetFromServer, UpdateOnServer } from '../../api/requests';\nimport { counterSlice } from '../../store/counterSlice';\nimport { loadSinglePost } from '../../store/selectors';\nimport './Post.scss';\n\ninterface Props {\n  body: string,\n  title: string,\n  id: number,\n}\n\nexport const Post : React.FC<Props> = ({ id, title = '', body = '' }) => {\n  const dispatch = useDispatch();\n\n  const [redactingPost, setRedactingPost] = useState(false);\n  const [redactedTitle, setRedactedTitle] = useState(title);\n  const [redactedBody, setRedactedBody] = useState(body);\n\n  const selectedPost = useSelector(loadSinglePost);\n\n  return (\n    <div className=\"post\">\n      {!redactingPost && (\n        <>\n          <h1>{title}</h1>\n          <p>{body}</p>\n          <button\n            className=\"post__button\"\n            type=\"button\"\n            onClick={() => {\n              setRedactingPost(true);\n            }}\n          >\n            redact post\n          </button>\n        </>\n      )}\n      {\n        redactingPost && (\n          <>\n            <input\n              type=\"text\"\n              value={redactedTitle}\n              onChange={(event) => setRedactedTitle(event.target.value)}\n            />\n            <textarea\n              value={redactedBody}\n              rows={15}\n              onChange={(event) => setRedactedBody(event.target.value)}\n            />\n            <button\n              type=\"button\"\n              className=\"post__button\"\n              onClick={async () => {\n                const postToUpdate = {\n                  id,\n                  title: redactedTitle,\n                  body: redactedBody,\n                };\n\n                await UpdateOnServer(postToUpdate);\n\n                const result = await GetFromServer('posts');\n\n                dispatch(counterSlice.actions.showPosts(result));\n\n                setRedactingPost(false);\n              }}\n            >\n              submit changes\n            </button>\n          </>\n        )\n      }\n      <button\n        type=\"button\"\n        className=\"post__button\"\n        onClick={() => {\n          if ((selectedPost === null) || (selectedPost.id !== id)) {\n            dispatch(counterSlice.actions.selectPost(id));\n          } else {\n            dispatch(counterSlice.actions.selectPost(null));\n          }\n        }}\n      >\n        { selectedPost\n          ? ('Close post')\n          : ('Show more')}\n      </button>\n      <button\n        type=\"button\"\n        className=\"post__button\"\n        onClick={async () => {\n          await DeleteFromServer(id);\n          dispatch(\n            counterSlice\n              .actions\n              .showPosts(await GetFromServer('posts')),\n          );\n        }}\n      >\n        Delete Post\n      </button>\n    </div>\n\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { GetFromServer, PutOnServer } from '../../api/requests';\nimport { Comment } from '../../react-app-env';\n\ninterface Props {\n  id: number,\n}\n\nexport const Comments : React.FC<Props> = ({ id }) => {\n  const [commentsArray, setCommentArray] = useState<Comment[]>([]);\n\n  const [commentBody, setCommentBody] = useState('');\n\n  useEffect(() => {\n    const fetcher = async () => {\n      const result = await GetFromServer(`posts/${id}?_embed=comments`);\n\n      setCommentArray(result.comments);\n    };\n\n    fetcher();\n  }, []);\n\n  return (\n    <div className=\"comments\">\n      <h1 className=\"comments__title\">Comment section</h1>\n      <div className=\"comments__body\">\n        {\n          commentsArray.map(singleComment => (\n            <p className=\"comments__body--text\" key={singleComment.id}>\n              {singleComment.body}\n            </p>\n          ))\n        }\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n\n            const newComment = {\n              postId: id,\n              body: commentBody,\n            };\n\n            PutOnServer('comments', newComment);\n\n            setCommentArray([...commentsArray, newComment]);\n          }}\n        >\n          <input\n            type=\"text\"\n            value={commentBody}\n            onChange={(event) => {\n              setCommentBody(event.target.value);\n            }}\n          />\n          <button type=\"submit\">\n            send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { loadPosts, loadSinglePost } from '../store/selectors';\nimport { Post } from '../components/Post/Post';\nimport { PostDataType } from '../react-app-env';\nimport { Comments } from '../components/Comments/Comments';\n\nexport const Posts : React.FC = () => {\n  const posts = useSelector(loadPosts);\n  const selectedPost = useSelector(loadSinglePost);\n\n  const [isPostsShown, setPostsShown] = useState(false);\n\n  return (\n    <div className={classNames({ empty: !isPostsShown }, { posts__container: isPostsShown })}>\n      {\n        (isPostsShown)\n          ? (\n            (selectedPost === null)\n              ? (\n                posts.map((el : PostDataType) => (\n                  <Post key={el.id} id={el.id} title={el.title} body={el.body} />\n                ))\n              )\n              : (\n                <>\n                  <Post\n                    key={selectedPost.id}\n                    id={selectedPost.id}\n                    title={selectedPost.title}\n                    body={selectedPost.body}\n                  />\n                  <Comments id={selectedPost.id} />\n\n                </>\n              )\n          )\n          : (\n            <>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setPostsShown(true);\n                }}\n              >\n                show me posts\n              </button>\n            </>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link, Route, Routes } from 'react-router-dom';\nimport { GetFromServer } from './api/requests';\nimport './App.scss';\nimport { HomePage } from './pages/Homepage';\nimport { PostCreator } from './pages/PostCreator';\nimport { Posts } from './pages/Posts';\nimport { counterSlice } from './store/counterSlice';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetcher = async () => {\n      const result = await GetFromServer('posts');\n\n      dispatch(counterSlice.actions.showPosts(result));\n    };\n\n    fetcher();\n  }, []);\n\n  return (\n    <>\n      <header>\n        <div className=\"navigation\">\n          <Link className=\"navigation__link\" to=\"/\">Home</Link>\n          <Link className=\"navigation__link\" to=\"/posts\">Posts</Link>\n          <Link className=\"navigation__link\" to=\"/post_creator\">Create Post</Link>\n        </div>\n      </header>\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/posts\" element={<Posts />} />\n        <Route path=\"/post_creator\" element={<PostCreator />} />\n      </Routes>\n    </>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counterSlice';\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { App } from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}